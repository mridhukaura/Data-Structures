class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
       map<int,map<int,multiset<int> > > nodes;
       queue<pair<TreeNode*,pair<int,int> > > q;
       vector<int> ans;
       vector<vector<int>> res;
       if(root==NULL)
           return res;
        q.push(make_pair(root,make_pair(0,0)));
        while(!q.empty()){
           pair<TreeNode*,pair<int,int> > temp = q.front();
           q.pop();
           TreeNode* frontNode = temp.first;
           int hd = temp.second.first;
           int lvl = temp.second.second;
           nodes[hd][lvl].insert(frontNode->val);
           if(frontNode->left!=NULL)
               q.push(make_pair(frontNode->left,make_pair(hd-1,lvl+1)));
            if(frontNode->right!=NULL)
                q.push(make_pair(frontNode->right,make_pair(hd+1,lvl+1)));
        }
        for(auto i : nodes){
            for(auto j : i.second){
                for(auto k : j.second){
                    ans.push_back(k);
                }
                 
            }
            res.push_back(ans);
           ans.clear();
        }
        return res;
    }
};
